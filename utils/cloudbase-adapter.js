/**\n * 云开发适配器\n * 用于兼容不同版本的微信小程序云开发API\n */\n\n// 是否已初始化\nlet isInitialized = false;\n\n/**\n * 初始化云开发适配器\n */\nconst initCloudBaseAdapter = () => {\n  if (isInitialized) return;\n  \n  // 检查是否支持云开发\n  if (!wx.cloud) {\n    console.error('当前微信基础库版本过低，无法使用云开发功能，请升级微信!');\n    return;\n  }\n  \n  // 调用兼容适配函数\n  adaptCloudAPI();\n  \n  isInitialized = true;\n  console.log('云开发适配器初始化完成');\n};\n\n/**\n * 适配云开发API\n * 用于支持新旧API接口的兼容\n */\nconst adaptCloudAPI = () => {\n  try {\n    // 数据库API兼容\n    adaptDatabaseAPI();\n    \n    // 存储API兼容\n    adaptStorageAPI();\n    \n    // 云函数API兼容\n    adaptCloudFunctionAPI();\n    \n    console.log('云开发API适配完成');\n  } catch (error) {\n    console.error('云开发API适配失败:', error);\n  }\n};\n\n/**\n * 适配数据库API\n */\nconst adaptDatabaseAPI = () => {\n  const db = wx.cloud.database();\n  \n  // 检查并扩展collection的方法\n  const originalCollection = db.collection;\n  \n  if (originalCollection) {\n    // 重写collection方法，增强其功能\n    db.collection = function(collectionName) {\n      const collection = originalCollection.call(this, collectionName);\n      \n      // 为collection添加额外的兼容方法\n      enhanceCollection(collection);\n      \n      return collection;\n    };\n  }\n  \n  // 检查并适配聚合操作API\n  adaptAggregateAPI();\n  \n  // 检查并适配地理位置API\n  adaptGeoAPI();\n  \n  console.log('数据库API适配完成');\n};\n\n/**\n * 增强集合对象的功能\n * @param {Object} collection 集合对象\n */\nconst enhanceCollection = (collection) => {\n  if (!collection) return;\n  \n  // 添加分页加载辅助方法\n  if (!collection.pageQuery) {\n    collection.pageQuery = function(options = {}) {\n      const {\n        page = 1,\n        size = 10,\n        orderBy,\n        orderDirection = 'desc',\n        condition = {},\n        field = {}\n      } = options;\n      \n      // 构建查询\n      let query = this.where(condition);\n      \n      // 设置查询字段\n      if (Object.keys(field).length > 0) {\n        query = query.field(field);\n      }\n      \n      // 设置排序\n      if (orderBy) {\n        query = query.orderBy(orderBy, orderDirection);\n      }\n      \n      // 设置分页\n      const skip = (page - 1) * size;\n      query = query.skip(skip).limit(size);\n      \n      return query.get();\n    };\n  }\n  \n  // 添加批量添加方法\n  if (!collection.batchAdd) {\n    collection.batchAdd = async function(dataList = []) {\n      if (!dataList || !dataList.length) {\n        return { code: -1, message: '数据列表为空', data: null };\n      }\n      \n      try {\n        // 分批次添加数据，每次最多添加 20 条\n        const batchSize = 20;\n        const result = [];\n        \n        for (let i = 0; i < dataList.length; i += batchSize) {\n          const batch = dataList.slice(i, i + batchSize);\n          const res = await Promise.all(batch.map(data => this.add({ data })));\n          result.push(...res);\n        }\n        \n        return { code: 0, message: 'success', data: result };\n      } catch (error) {\n        console.error('批量添加数据失败:', error);\n        return { code: -1, message: error.message || '批量添加数据失败', data: null };\n      }\n    };\n  }\n  \n  // 添加根据ID获取数据方法\n  if (!collection.getById) {\n    collection.getById = function(id) {\n      if (!id) {\n        return Promise.reject(new Error('ID不能为空'));\n      }\n      \n      return this.doc(id).get();\n    };\n  }\n  \n  // 添加根据字段获取一条记录的方法\n  if (!collection.getOne) {\n    collection.getOne = function(field, value) {\n      if (!field || value === undefined) {\n        return Promise.reject(new Error('字段和值不能为空'));\n      }\n      \n      const condition = {};\n      condition[field] = value;\n      \n      return this.where(condition).limit(1).get().then(res => {\n        const list = res.data || [];\n        return list.length > 0 ? list[0] : null;\n      });\n    };\n  }\n};\n\n/**\n * 适配聚合操作API\n */\nconst adaptAggregateAPI = () => {\n  // 这里可以添加对聚合操作API的适配，如果有需要\n  // 例如，确保旧版本基础库也能使用新的聚合操作方法\n};\n\n/**\n * 适配地理位置API\n */\nconst adaptGeoAPI = () => {\n  const db = wx.cloud.database();\n  const _ = db.command;\n  const geo = db.Geo || _.geo;\n  \n  // 如果没有地理位置API，添加基础地理位置方法\n  if (!geo) {\n    console.warn('当前环境不支持地理位置API，将使用兼容实现');\n    \n    // 在命令对象上添加geo命令\n    _.geo = {\n      // 点位置\n      point: (longitude, latitude) => {\n        return { type: 'Point', coordinates: [longitude, latitude] };\n      },\n      // 距离计算\n      distance: (from, to) => {\n        return { $geoNear: { near: from, distanceField: 'distance', query: to } };\n      }\n    };\n  }\n};\n\n/**\n * 适配存储API\n */\nconst adaptStorageAPI = () => {\n  // 确保上传文件方法支持进度回调\n  const originalUploadFile = wx.cloud.uploadFile;\n  \n  if (originalUploadFile) {\n    wx.cloud.uploadFile = function(options = {}) {\n      const { onProgressUpdate } = options;\n      \n      // 调用原始上传方法\n      const uploadTask = originalUploadFile.call(this, options);\n      \n      // 如果支持进度回调且用户提供了回调函数\n      if (uploadTask && uploadTask.onProgressUpdate && onProgressUpdate) {\n        uploadTask.onProgressUpdate(onProgressUpdate);\n      }\n      \n      return uploadTask;\n    };\n  }\n  \n  console.log('存储API适配完成');\n};\n\n/**\n * 适配云函数API\n */\nconst adaptCloudFunctionAPI = () => {\n  const originalCallFunction = wx.cloud.callFunction;\n  \n  if (originalCallFunction) {\n    // 增强云函数调用，添加超时重试等功能\n    wx.cloud.callFunction = function(options = {}) {\n      const { name, data = {}, timeout = 15000, retryTimes = 1 } = options;\n      \n      // 添加调用时间戳\n      const callOptions = {\n        ...options,\n        data: {\n          ...data,\n          _timestamp: Date.now() // 添加时间戳，避免缓存\n        }\n      };\n      \n      // 设置超时\n      if (timeout > 0) {\n        callOptions.timeout = timeout;\n      }\n      \n      // 实现简单的重试机制\n      return new Promise((resolve, reject) => {\n        const callWithRetry = (retryCount) => {\n          originalCallFunction.call(this, {\n            ...callOptions,\n            success: (res) => {\n              resolve(res);\n            },\n            fail: (err) => {\n              if (retryCount < retryTimes) {\n                console.warn(`云函数 ${name} 调用失败，正在进行第 ${retryCount + 1} 次重试`);\n                setTimeout(() => {\n                  callWithRetry(retryCount + 1);\n                }, 1000); // 重试间隔1秒\n              } else {\n                console.error(`云函数 ${name} 调用失败，已重试 ${retryCount} 次`, err);\n                reject(err);\n              }\n            }\n          });\n        };\n        \n        callWithRetry(0);\n      });\n    };\n  }\n  \n  console.log('云函数API适配完成');\n};\n\nmodule.exports = {\n  initCloudBaseAdapter\n};