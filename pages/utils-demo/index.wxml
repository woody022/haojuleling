<!-- pages/utils-demo/index.wxml -->
<view class="container">
  <view class="header">
    <view class="title">工具类函数演示</view>
    <view class="description">这里展示了utils/common.js中的一些常用工具函数</view>
  </view>

  <!-- isEmpty函数 -->
  <view class="section">
    <view class="section-title">isEmpty函数</view>
    <view class="section-desc">判断一个值是否为空（null、undefined、''、[]、{}）</view>
    
    <view class="test-item">
      <view class="input-group">
        <input type="text" placeholder="输入值测试是否为空" value="{{testData.isEmpty.value}}" bindinput="testIsEmpty"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.isEmpty.result}}</view>
      </view>
    </view>
  </view>
  
  <!-- deepClone函数 -->
  <view class="section">
    <view class="section-title">deepClone函数</view>
    <view class="section-desc">深度克隆一个对象</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">原对象：</view>
        <view class="display-value">{{testData.deepClone.obj.a}}, {{testData.deepClone.obj.b.c}}</view>
      </view>
      <view class="display-box">
        <view class="display-label">克隆结果：</view>
        <view class="display-value">{{testData.deepClone.result}}</view>
      </view>
      <button class="test-button" bindtap="testDeepClone">重新测试</button>
    </view>
  </view>
  
  <!-- merge函数 -->
  <view class="section">
    <view class="section-title">merge函数</view>
    <view class="section-desc">合并两个对象</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">目标对象：</view>
        <view class="display-value">{{testData.merge.target}}</view>
      </view>
      <view class="display-box">
        <view class="display-label">源对象：</view>
        <view class="display-value">{{testData.merge.source}}</view>
      </view>
      <view class="display-box">
        <view class="display-label">合并结果：</view>
        <view class="display-value">{{testData.merge.result}}</view>
      </view>
      <button class="test-button" bindtap="testMerge">测试合并</button>
    </view>
  </view>
  
  <!-- formatDate函数 -->
  <view class="section">
    <view class="section-title">formatDate函数</view>
    <view class="section-desc">格式化日期</view>
    
    <view class="test-item">
      <view class="input-group">
        <input type="text" placeholder="输入格式，如：YYYY-MM-DD HH:mm:ss" value="{{testData.formatDate.format}}" bindinput="testFormatDate"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.formatDate.result}}</view>
      </view>
    </view>
  </view>
  
  <!-- formatNumber函数 -->
  <view class="section">
    <view class="section-title">formatNumber函数</view>
    <view class="section-desc">格式化数字（保留小数位数，添加千位分隔符）</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">原数字：</view>
        <view class="display-value">{{testData.formatNumber.number}}</view>
      </view>
      <view class="param-control">
        <view class="param-label">小数位数：</view>
        <input class="param-input" type="number" value="{{testData.formatNumber.decimals}}" bindinput="onDecimalsChange"/>
      </view>
      <view class="param-control">
        <view class="param-label">千位分隔符：</view>
        <switch checked="{{testData.formatNumber.addCommas}}" bindchange="toggleAddCommas"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.formatNumber.result}}</view>
      </view>
      <button class="test-button" bindtap="testFormatNumber">重新格式化</button>
    </view>
  </view>
  
  <!-- random函数 -->
  <view class="section">
    <view class="section-title">random函数</view>
    <view class="section-desc">生成随机数</view>
    
    <view class="test-item">
      <view class="param-control">
        <view class="param-label">最小值：</view>
        <input class="param-input" type="number" value="{{testData.random.min}}" bindinput="onMinChange"/>
      </view>
      <view class="param-control">
        <view class="param-label">最大值：</view>
        <input class="param-input" type="number" value="{{testData.random.max}}" bindinput="onMaxChange"/>
      </view>
      <view class="param-control">
        <view class="param-label">整数：</view>
        <switch checked="{{testData.random.isInteger}}" bindchange="toggleIsInteger"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.random.result}}</view>
      </view>
      <button class="test-button" bindtap="testRandom">生成随机数</button>
    </view>
  </view>
  
  <!-- getUrlParam函数 -->
  <view class="section">
    <view class="section-title">getUrlParam函数</view>
    <view class="section-desc">获取URL参数</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">URL：</view>
        <view class="display-value ellipsis">{{testData.getUrlParam.url}}</view>
      </view>
      <view class="param-control">
        <view class="param-label">参数名：</view>
        <input class="param-input" type="text" value="{{testData.getUrlParam.name}}" bindinput="onParamNameChange"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.getUrlParam.result}}</view>
      </view>
      <button class="test-button" bindtap="testGetUrlParam">获取参数</button>
    </view>
  </view>
  
  <!-- buildUrlParams函数 -->
  <view class="section">
    <view class="section-title">buildUrlParams函数</view>
    <view class="section-desc">构建URL参数字符串</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">参数对象：</view>
        <view class="display-value">{{testData.buildUrlParams.params}}</view>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.buildUrlParams.result}}</view>
      </view>
      <button class="test-button" bindtap="testBuildUrlParams">构建参数</button>
    </view>
  </view>
  
  <!-- randomString函数 -->
  <view class="section">
    <view class="section-title">randomString函数</view>
    <view class="section-desc">生成随机字符串</view>
    
    <view class="test-item">
      <view class="param-control">
        <view class="param-label">长度：</view>
        <input class="param-input" type="number" value="{{testData.randomString.length}}" bindinput="onLengthChange"/>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.randomString.result}}</view>
      </view>
      <button class="test-button" bindtap="testRandomString">生成随机字符串</button>
    </view>
  </view>
  
  <!-- formatFileSize函数 -->
  <view class="section">
    <view class="section-title">formatFileSize函数</view>
    <view class="section-desc">格式化文件大小</view>
    
    <view class="test-item">
      <view class="display-box">
        <view class="display-label">字节数：</view>
        <view class="display-value">{{testData.formatFileSize.bytes}}</view>
      </view>
      <view class="display-box">
        <view class="display-label">结果：</view>
        <view class="display-value">{{testData.formatFileSize.result}}</view>
      </view>
      <button class="test-button" bindtap="testFormatFileSize">格式化大小</button>
    </view>
  </view>
  
  <!-- debounce和throttle函数 -->
  <view class="section">
    <view class="section-title">debounce和throttle函数</view>
    <view class="section-desc">防抖和节流函数演示</view>
    
    <view class="test-item">
      <view class="buttons-row">
        <button class="test-button" bindtap="testDebounce">测试防抖函数</button>
        <button class="test-button" bindtap="testThrottle">测试节流函数</button>
      </view>
      <view class="display-box">
        <view class="display-value">点击按钮后查看控制台输出或Toast提示</view>
      </view>
    </view>
  </view>
</view>